{"version":3,"sources":["logo.svg","loading.svg","Button.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Button","props","onClick","children","App","state","text","nbOfSongs","songs","fetch","method","headers","Authorization","then","response","json","data","setState","items","length","console","log","this","song1","song2","song3","className","src","logo","alt","key","index","track","url","preview_url","playStatus","Sound","status","PLAYING","name","loading","Component","AlbumCover","album","images","style","width","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.85f851a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.79f6b6a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.9d4cbf40.svg\";","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => (\n  <button onClick={props.onClick}>{props.children}</button>\n);\n\nexport default Button;\n","/*global swal*/\n\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport loading from './loading.svg';\nimport './App.css';\nimport Sound from 'react-sound';\nimport Button from './Button';\n\nconst apiToken = 'BQCFtE6HgKFdbk6z1ZE2HgpHDWebt7SS1yEdtHlkD1NC0oSbGaOj8geXPnwRT_mJx_Kz07wzCdHAKf6i3DhUphGWXtkDgGrinD2aRmEb3IIcB7MjaR6M_m430SdTsDuhaRVkuOuahvLNdpJHEfo1wfXCyMCDgyGj09NnFp9Q8SIqDw';\n\nfunction shuffleArray(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    let index = getRandomNumber(counter);\n    counter--;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x) {\n  return Math.floor(Math.random() * x);\n}\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n       text:\"Bonjour!\",\n       nbOfSongs: 0, \n       songs: [], \n      }\n  }\n\n  componentDidMount() {\n    fetch('https://api.spotify.com/v1/playlists/1wCB2uVwBCIbJA9rar5B77/tracks', {\n    method: 'GET',\n    headers: {\n    Authorization: 'Bearer ' + apiToken,\n    },\n  })\n  .then(response => response.json())\n  .then((data) => {\n    this.setState({nbOfSongs: data.items.length, songs: data.items}); \n    console.log(\"Réponse reçue ! Voilà ce que j'ai reçu : \", data.items);\n  })\n  }\n\n  render() {\n    const { songs, nbOfSongs, text } = this.state; \n    const song1 = songs[0]\n    const song2 = songs[1]\n    const song3 = songs[2]\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n          <h1 className=\"App-title\"><p>{text}</p></h1>\n        </header>\n        {this.state.nbOfSongs !==0 ? <>\n\n          <div className=\"App-images\">\n          <p>Il y a {nbOfSongs} musiques dans ta playlist!</p>\n          <p>Voici 1 album de la playlist:</p> \n          {/* {songs.map((song, index) => <p key={index}> {index+1} {song.track.name} </p>)} */}\n          </div>\n          <AlbumCover key={0} index={0} track={song1}> </AlbumCover>\n\n          <Sound url={song1.track.preview_url} playStatus={Sound.status.PLAYING}/>\n\n        <div className=\"App-buttons\">\n        <Button>{song1.track.name}</Button>\n          <Button>{song2.track.name}</Button>\n          <Button>{song3.track.name}</Button>\n        </div>\n        </> :  <img src={loading} className=\"App-logo\" alt=\"logo\"/>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nclass AlbumCover extends Component { \n  \n   render(){\n    const {index, track}= this.props.track ; \n    const src = track.album.images[0].url; \n    return( <img src={src} style={{ width: 400, height: 400 }} />\n    )  \n   }\n   \n    // const src = ; // A changer ;)\n    // return (<img src={src} style={{ width: 400, height: 400 }} />);\n  }\n\n\n\n\n\n\n\n\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}